# -*- coding: utf-8 -*-
"""ModelCode.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1D5WcOkPNLYvO1eWH7QLuaXkYhryHZMUZ
"""

import numpy as np
import pandas as pd
import difflib
from sklearn.feature_extraction.text import TfidfVectorizer #wee need to convert data into numerical vectors
from sklearn.metrics.pairwise import cosine_similarity #to find the similarity score between the movies

"""## **DATA**"""

movies=pd.read_csv('movies.csv')

"""Some data **infos**"""

movies.head()

movies.shape

#feature Selection
selected_features=['genres','keywords','tagline','cast','director']

"""Filling the null values with a null string"""

for feature in selected_features:
  movies[feature]=movies[feature].fillna('')

#constructing the table for chosen features
combined_features=movies['genres']+' '+movies['keywords']+' '+movies['tagline']+' '+movies['cast']+' '+movies['director']
combined_features.head()

#Converting to feature vectors
vectorizer=TfidfVectorizer()
feature_vectors=vectorizer.fit_transform(combined_features)
print(feature_vectors)

"""Finding data simalirities using Cosine Similarity

"""

similarity=cosine_similarity(feature_vectors)
print(similarity)





"""
print("Movies suggested for you:\n")
i=1
for movie in sorted_similarities:
  index=movie[0]
  title_from_index=movies[movies.index==index]['title'].values[0]
  if(i<10):
    print(i,'.',title_from_index)
    i+=1
"""

"""**Recommendation** **Function**"""

def recommend_movies(movie_name, top_n=6):
    list_titles = movies['title'].tolist()
    find_close_match = difflib.get_close_matches(movie_name, list_titles, n=1)

    if not find_close_match:
        return []

    close_match = find_close_match[0]
    movie_index = movies[movies.title == close_match]['index'].values

    if len(movie_index) == 0:
        return []

    movie_index = movie_index[0]
    similarity_score = list(enumerate(similarity[movie_index]))
    sorted_similarities = sorted(similarity_score, key=lambda x: x[1], reverse=True)

    recommended_movies = [
        movies.iloc[movie[0]]['title'] for movie in sorted_similarities[0:top_n+1]
    ]

    return recommended_movies

